Lab 2 - continue in same application
	Create a interface Connection with open and close methods
	Create a class OracleConnection implments Connection (@Component annotation)
	Create a class DeptDAO (@Component annotation)
			private Connection con ;     //= new OracleConnection();
	
		public void insert(){
			getCon().open();
			System.out.println("insert the record to oracle");
			getCon().close();
		}
	Modify main method to invoke 
		DeptDAO dao = ctx.getBean("deptDAO",DeptDAO.class);
		dao.insert();
	
	Test -> Null pointer exception
	@Autowired for private Connection con ; 
	Test -> open with oracle .. success
	Create one more class SqlConnection implments Connection (@Component annotation)
	Test -> Error, No unique bean (but found 2)
	Add @qualifier annotation  for private Connection con ; 
		@Qualifier(value="sql")-> value = bean name
	Change qualifier to see both Connections invoked...

----------------------------------------------------
Eclipse => prefer-> modify jre and change it to jdk
Lab 1 
	Create maven project
	Modify pom file
		<dependencies>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>5.2.9.RELEASE</version>
			</dependency>

		</dependencies>

	Create a Demo1Application.java
		package demo;

		@Configuration()
		@ComponentScan(basePackages="demo")
		public class Demo1Application {

			public static void main(String[] args) {
				// TODO Auto-generated method stub
				ApplicationContext ctx  = new AnnotationConfigApplicationContext(Demo1Application.class);
				System.out.println("Context Loaded .................................\n");
				String[] beannames = ctx.getBeanDefinitionNames();
				System.out.println(Arrays.toString(beannames));
				
				First first = ctx.getBean("myfirst",First.class);
				first.m1();
				First first1 = ctx.getBean("myfirst",First.class);
				first1.m1();
			}
		}

	Create First.java 
		package demo;

		@Component(value="myfirst")
		@Scope(value="prototype")
		public class First {
			public First() {
				System.out.println("First Constructor");
			}
			public void m1(){
				System.out.println(" m1 of First ");
			}
		}

-> Test, Change the scope - > singleton/prototype
	And observe
		When instance is created/how many 
